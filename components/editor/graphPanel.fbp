% ---
% Logic stream
in => in awIn(QTk/actionsWrapper)
awIn() out -> in awOut(QTk/actionsWrapper) out => out
awOut() action => action

% ---
% UI stream
awIn() action#create -> in canvas(QTk/canvas) out -> in awOut()

% ---
% Mouse Logic
% Get the canvas handle, just to transform mouse coordinate in canvas coordinate
"getHandle(output:getHandleML)" -> in canvas()
canvas() action#getHandleML -> input ht(editor/handleTransform) output -> options ml(editor/mouseLogic)
% drag&drop only if not in a component
canvas() action#ButtonPress -> input ml() 
canvas() action#Motion -> input ml() 
canvas() action#ButtonRelease -> input ml()
createComp(editor/createComp) action#inObject -> input ml()
createComp() action#outObject -> input ml()
% Move link only if in [beginLink endLink]
createLink(editor/createLink) ml -> input ml()
createLink() ml -> input ml()

% ---
% Click to get back to graphEdit
% or the component want to close
ml() click -> input ieGraphEdit(ipEdit) out -> in awOut()
createComp() action#closeComp -> input d(display) output -> input ieGraphEdit()
"set(text:displayGraph)" -> options ieGraphEdit()

% ---
% Canvas scanning
ml() drag ->  input scan(editor/scan)
scan() canvas -> in canvas()

% ---
% Create the links
createComp() action#createLink -> input createLink()
ml() link -> input createLink()
createLink() out -> widget canvas()

% ---
% New comp from outsideÂµ
awIn() action#newComp -> input getPos(editor/getPosition) output -> input createComp()
canvas() action#getHandleML -> input ht(editor/handleTransform) output -> options getPos()
createComp() out -> widget canvas()
